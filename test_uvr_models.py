#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script for Ultimate Vocal Remover models
р╕Чр╕Фр╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕е Ultimate Vocal Remover
"""

import os
import sys
from pathlib import Path
import numpy as np
import soundfile as sf

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services import UltimateVocalRemover

def create_test_audio():
    """р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕Фр╕кр╕нр╕Ъ"""
    print("ЁЯО╡ р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕Фр╕кр╕нр╕Ъ...")
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕Фр╕кр╕нр╕Ъ (р╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕З + р╕Фр╕Щр╕Хр╕гр╕╡)
    sample_rate = 44100
    duration = 5  # 5 р╕зр╕┤р╕Щр╕▓р╕Чр╕╡
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕З (sine wave 440Hz)
    t = np.linspace(0, duration, int(sample_rate * duration), False)
    vocals = 0.3 * np.sin(2 * np.pi * 440 * t)  # р╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕З
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╕Фр╕Щр╕Хр╕гр╕╡ (chord progression)
    music = 0.2 * np.sin(2 * np.pi * 220 * t) + 0.1 * np.sin(2 * np.pi * 330 * t)
    
    # р╕Ьр╕кр╕бр╣Ар╕кр╕╡р╕вр╕З
    mixed_audio = vocals + music
    
    # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕Яр╕ер╣М
    test_audio_path = Path("temp/test_audio.wav")
    test_audio_path.parent.mkdir(exist_ok=True)
    sf.write(str(test_audio_path), mixed_audio, sample_rate)
    
    print(f"тЬЕ р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕Фр╕кр╕нр╕Ъ: {test_audio_path}")
    return str(test_audio_path)

def test_uvr_models():
    """р╕Чр╕Фр╕кр╕нр╕Ър╣Вр╕бр╣Ар╕Фр╕е UVR"""
    print("ЁЯзк р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ъ Ultimate Vocal Remover models...")
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕Чр╕Фр╕кр╕нр╕Ъ
    test_audio_path = create_test_audio()
    
    # р╕кр╕гр╣Йр╕▓р╕З UVR instance
    uvr = UltimateVocalRemover()
    
    print(f"ЁЯУК р╣Вр╕бр╣Ар╕Фр╕ер╕Чр╕╡р╣Ир╣Вр╕лр╕ер╕Ф: {len(uvr.models)}")
    print(f"ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╣Вр╕бр╣Ар╕Фр╕е: {list(uvr.models.keys())}")
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕вр╕Бр╣Ар╕кр╕╡р╕вр╕З
    print("\nЁЯО╡ р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕вр╕Бр╣Ар╕кр╕╡р╕вр╕З...")
    try:
        result = uvr.separate_audio(test_audio_path, "test_task")
        
        print("тЬЕ р╕Бр╕▓р╕гр╣Бр╕вр╕Бр╣Ар╕кр╕╡р╕вр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И!")
        print(f"ЁЯОд р╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕З: {result['vocals']}")
        print(f"ЁЯО╡ р╕Фр╕Щр╕Хр╕гр╕╡: {result['instrumental']}")
        print(f"ЁЯУК Sample Rate: {result['original_sr']}")
        
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕кр╕гр╣Йр╕▓р╕Зр╕Вр╕╢р╣Йр╕Щ
        vocals_path = Path(result['vocals'])
        instrumental_path = Path(result['instrumental'])
        
        if vocals_path.exists():
            print(f"тЬЕ р╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕Зр╕бр╕╡р╕нр╕вр╕╣р╣И: {vocals_path.stat().st_size} bytes")
        else:
            print("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣Мр╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕З")
            
        if instrumental_path.exists():
            print(f"тЬЕ р╣Др╕Яр╕ер╣Мр╕Фр╕Щр╕Хр╕гр╕╡р╕бр╕╡р╕нр╕вр╕╣р╣И: {instrumental_path.stat().st_size} bytes")
        else:
            print("тЭМ р╣Др╕бр╣Ир╕Юр╕Ър╣Др╕Яр╕ер╣Мр╕Фр╕Щр╕Хр╕гр╕╡")
        
        return True
        
    except Exception as e:
        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ: {e}")
        return False

def test_model_types():
    """р╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Вр╕бр╣Ар╕Фр╕ер╕Хр╣Ир╕▓р╕Зр╣Ж"""
    print("\nЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Вр╕бр╣Ар╕Фр╕е...")
    
    uvr = UltimateVocalRemover()
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ VR models
    vr_models = [key for key in uvr.models.keys() if key.startswith('vr_')]
    print(f"ЁЯО╡ VR Models: {vr_models}")
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ MDX models
    mdx_models = [key for key in uvr.models.keys() if key.startswith('mdx_')]
    print(f"ЁЯО╡ MDX Models: {mdx_models}")
    
    # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ default models
    if 'vocal' in uvr.models:
        print("тЬЕ р╕бр╕╡р╣Вр╕бр╣Ар╕Фр╕ер╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕Зр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ")
    else:
        print("тЭМ р╣Др╕бр╣Ир╕бр╕╡р╣Вр╕бр╣Ар╕Фр╕ер╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕Зр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ")
        
    if 'instrumental' in uvr.models:
        print("тЬЕ р╕бр╕╡р╣Вр╕бр╣Ар╕Фр╕ер╕Фр╕Щр╕Хр╕гр╕╡р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ")
    else:
        print("тЭМ р╣Др╕бр╣Ир╕бр╕╡р╣Вр╕бр╣Ар╕Фр╕ер╕Фр╕Щр╕Хр╕гр╕╡р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ")

def main():
    """р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щр╕лр╕ер╕▒р╕Б"""
    print("ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ъ Ultimate Vocal Remover Models")
    print("=" * 50)
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╣Вр╕бр╣Ар╕Фр╕е
    test_model_types()
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Бр╕вр╕Бр╣Ар╕кр╕╡р╕вр╕З
    success = test_uvr_models()
    
    print("\n" + "=" * 50)
    if success:
        print("ЁЯОЙ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕│р╣Ар╕гр╣Зр╕И! р╣Вр╕бр╣Ар╕Фр╕е UVR р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
    else:
        print("тЭМ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕ер╣Йр╕бр╣Ар╕лр╕ер╕з р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓")
    
    # р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕Фр╕кр╕нр╕Ъ
    test_files = ["temp/test_audio.wav", "temp/test_task_vocals.wav", "temp/test_task_instrumental.wav"]
    for file_path in test_files:
        if Path(file_path).exists():
            Path(file_path).unlink()
            print(f"ЁЯЧСя╕П р╕ер╕Ър╣Др╕Яр╕ер╣М: {file_path}")

if __name__ == "__main__":
    main() 